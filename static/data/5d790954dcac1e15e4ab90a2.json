{
  "article": {
    "_id": "5d790954dcac1e15e4ab90a2",
    "title": "使用kendo-ui日期选择框限制指定日期不可选",
    "type": "Javascript",
    "content_html": "<div class=\"hljs-center\">\n<h2><a id=\"kendoui_2\"></a>使用kendo-ui日期选择框限制指定日期不可选</h2>\n</div>\n<hr />\n<p>需求分析:</p>\n<blockquote>\n<ol>\n<li>限制双休日日期不可选</li>\n<li>假期日不可选</li>\n<li>三个工作日后的日期不可选,工作日需排除双休日和假期日</li>\n</ol>\n</blockquote>\n<p>使用kendo-ui可以完美实现这些要求，但是使用过程中有好多坑，不过参照我下面的写法就没问题，话不多说，直接上代码吧</p>\n<blockquote>\n<p>首先，创建一个输入框用于kendo日期控件初始化日期选择框</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-html\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"date\"</span>&gt;</span>\n</code></div></pre>\n<blockquote>\n<p>引入kendo-ui,由于kendo-ui是依赖于jQuery的，所以还得先引入jQuery</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">    &lt;script src=<span class=\"hljs-string\">\"/js/jquery.min.js\"</span>&gt;<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n    &lt;script type=<span class=\"hljs-string\">\"text/javascript\"</span> src=<span class=\"hljs-string\">\"/js/kendo.all.min.js\"</span>&gt;<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></div></pre>\n<blockquote>\n<p>定义假期日数组,这个假期日不是固定的，可以由用户维护，然后通过ajax请求获取，这里为了方便演示将其定义为固定数组</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">    <span class=\"hljs-keyword\">let</span> Holiday = [<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">\"2019-03-18\"</span>),<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">\"2019-03-19\"</span>),<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">\"2019-03-20\"</span>),<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">\"2019-03-21\"</span>),<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">\"2019-03-22\"</span>)]\n</code></div></pre>\n<blockquote>\n<p>初始化十日内的双休日+假期日，这里为什么只选取十日内的双休日呢，因为在未来的三个工作日之内假期日加上双休日基本不会出现十日以上的情况，这个日期集越小性能越好，所以无需定义更多，当然这里可以根据实际情况多定义几天，但强烈不建议定义整年的双休日，一是完全没必要，二是极其影响性能</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">    getHoliAndWeekendDay: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-comment\">//定义10天内所有的日期</span>\n        <span class=\"hljs-keyword\">let</span> Days = [<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(),\n                    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getTime() + <span class=\"hljs-number\">1</span>*<span class=\"hljs-number\">24</span>*<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">1000</span>),\n                    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getTime() + <span class=\"hljs-number\">2</span>*<span class=\"hljs-number\">24</span>*<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">1000</span>),\n                    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getTime() + <span class=\"hljs-number\">3</span>*<span class=\"hljs-number\">24</span>*<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">1000</span>),\n                    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getTime() + <span class=\"hljs-number\">4</span>*<span class=\"hljs-number\">24</span>*<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">1000</span>),\n                    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getTime() + <span class=\"hljs-number\">5</span>*<span class=\"hljs-number\">24</span>*<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">1000</span>),\n                    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getTime() + <span class=\"hljs-number\">6</span>*<span class=\"hljs-number\">24</span>*<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">1000</span>),\n                    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getTime() + <span class=\"hljs-number\">7</span>*<span class=\"hljs-number\">24</span>*<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">1000</span>),\n                    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getTime() + <span class=\"hljs-number\">8</span>*<span class=\"hljs-number\">24</span>*<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">1000</span>),\n                    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getTime() + <span class=\"hljs-number\">9</span>*<span class=\"hljs-number\">24</span>*<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">1000</span>)]\n\n        <span class=\"hljs-comment\">//定义周末日期数组</span>\n        <span class=\"hljs-keyword\">let</span> WeekendDay = []\n\n        <span class=\"hljs-comment\">//判断日期是否为周末，是的话添加到周末日期数组</span>\n        $.each(Days,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">index,item</span>)</span>{\n            <span class=\"hljs-keyword\">if</span>(item.getDay()==<span class=\"hljs-number\">0</span> || item.getDay()==<span class=\"hljs-number\">6</span>){\n                WeekendDay.push(item)\n            }\n        })\n\n        <span class=\"hljs-comment\">//将周末日期和假期日合并返回</span>\n        <span class=\"hljs-keyword\">return</span> WeekendDay.concat(Holiday)\n    }\n\n</code></div></pre>\n<blockquote>\n<p>定义compareDates方法用于判断日期是否是同一天，只判断年月日是否相同</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">    compareDates: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">date, dates</span>) </span>{\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; dates.length; i++) {\n            <span class=\"hljs-keyword\">if</span> (dates[i].getDate() == date.getDate() &amp;&amp;\n                dates[i].getMonth() == date.getMonth() &amp;&amp;\n                dates[i].getYear() == date.getYear()) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n            }\n        }\n    }\n</code></div></pre>\n<blockquote>\n<p>获取三个工作日内的最大日期</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">    getMaxDate: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-comment\">//设置最大日期初始值(第3天)</span>\n        <span class=\"hljs-keyword\">let</span> MaxDate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getTime() + <span class=\"hljs-number\">3</span>*<span class=\"hljs-number\">24</span>*<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">1000</span>)\n\n        <span class=\"hljs-comment\">//三个工作日日期数组初始值(先假定未来三天内全是工作日)</span>\n        <span class=\"hljs-keyword\">let</span> workDays = [<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()),<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getTime() + <span class=\"hljs-number\">1</span>*<span class=\"hljs-number\">24</span>*<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">1000</span>),<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getTime() + <span class=\"hljs-number\">2</span>*<span class=\"hljs-number\">24</span>*<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">1000</span>)]\n\n        <span class=\"hljs-comment\">//获取假期日+周末日期</span>\n        <span class=\"hljs-keyword\">let</span> holiDays = getHoliAndWeekendDay()\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i =<span class=\"hljs-number\">0</span>;i&lt;workDays.length;i++){\n            <span class=\"hljs-comment\">//判断工作日是否为假期日或者双休日，是的话最大日期加一天</span>\n            <span class=\"hljs-keyword\">if</span>(compareDates(workDays[i],holiDays)){\n                MaxDate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(MaxDate.getTime() + <span class=\"hljs-number\">24</span>*<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">1000</span>)\n            }\n            <span class=\"hljs-comment\">//循环判断最新的最大日期是否为假期日或者双休日，是的话最大日期再加一天，直到最大日期不是假期日和双休日则跳出循环</span>\n            <span class=\"hljs-keyword\">while</span>(compareDates(MaxDate,holiDays)){\n                MaxDate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(MaxDate.getTime() + <span class=\"hljs-number\">24</span>*<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">1000</span>)\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> MaxDate\n    }\n</code></div></pre>\n<blockquote>\n<p>初始化kendo-ui日期控件</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">    initKendoDateControl: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">target</span>) </span>{\n        target.kendoDatePicker({\n        <span class=\"hljs-attr\">format</span>: <span class=\"hljs-string\">\"dd MMM yyyy\"</span>,\n        <span class=\"hljs-attr\">parseFormats</span>: [<span class=\"hljs-string\">\"yyyy-MM-dd\"</span>],\n        <span class=\"hljs-attr\">disableDates</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">date</span>)</span>{        <span class=\"hljs-comment\">//配置禁止选择指定日期</span>\n            <span class=\"hljs-keyword\">let</span> isHoliDay = <span class=\"hljs-literal\">false</span>\n            <span class=\"hljs-keyword\">let</span> holiDays = getHoliAndWeekendDay()   <span class=\"hljs-comment\">//假期日+周末日期</span>\n            <span class=\"hljs-keyword\">if</span> (date &amp;&amp; compareDates(date,holiDays)){\n                isHoliDay = <span class=\"hljs-literal\">true</span>\n            }\n            <span class=\"hljs-keyword\">return</span> isHoliDay\n        },\n        <span class=\"hljs-attr\">max</span>:getMaxDate()        <span class=\"hljs-comment\">//定义最大可选日期，即第三个工作日为最大日期，第三个工作日后的所有日期不可宣不可见</span>\n        })\n        .data(<span class=\"hljs-string\">'kendoDatePicker'</span>).enable(<span class=\"hljs-literal\">true</span>)\n\n        <span class=\"hljs-comment\">// 失去焦点时判断日期合法性</span>\n        target.on(<span class=\"hljs-string\">'blur'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n            $(<span class=\"hljs-keyword\">this</span>).kendoDateCheck()\n        })\n    }\n</code></div></pre>\n<blockquote>\n<p>初始化日期输入框</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">    initKendoDateControl($(<span class=\"hljs-string\">\"#date\"</span>))\n\n    <span class=\"hljs-comment\">//将日期输入框设置成只可点选不可输入</span>\n    $(<span class=\"hljs-string\">\"#date\"</span>).data(<span class=\"hljs-string\">\"kendoDatePicker\"</span>).element[<span class=\"hljs-number\">0</span>].disabled=<span class=\"hljs-literal\">true</span>\n</code></div></pre>\n",
    "content_md": "::: hljs-center\n\n## 使用kendo-ui日期选择框限制指定日期不可选\n\n:::\n\n---\n\n需求分析:\n\n>1. 限制双休日日期不可选\n>2. 假期日不可选\n>3. 三个工作日后的日期不可选,工作日需排除双休日和假期日\n\n使用kendo-ui可以完美实现这些要求，但是使用过程中有好多坑，不过参照我下面的写法就没问题，话不多说，直接上代码吧\n\n\n> 首先，创建一个输入框用于kendo日期控件初始化日期选择框\n``` html\n    <input id=\"date\">\n```\n\n> 引入kendo-ui,由于kendo-ui是依赖于jQuery的，所以还得先引入jQuery\n``` javascript\n    <script src=\"/js/jquery.min.js\"></script>\n    <script type=\"text/javascript\" src=\"/js/kendo.all.min.js\"></script>\n```\n\n> 定义假期日数组,这个假期日不是固定的，可以由用户维护，然后通过ajax请求获取，这里为了方便演示将其定义为固定数组\n\n``` javascript\n    let Holiday = [new Date(\"2019-03-18\"),new Date(\"2019-03-19\"),new Date(\"2019-03-20\"),new Date(\"2019-03-21\"),new Date(\"2019-03-22\")]\n```\n\n> 初始化十日内的双休日+假期日，这里为什么只选取十日内的双休日呢，因为在未来的三个工作日之内假期日加上双休日基本不会出现十日以上的情况，这个日期集越小性能越好，所以无需定义更多，当然这里可以根据实际情况多定义几天，但强烈不建议定义整年的双休日，一是完全没必要，二是极其影响性能\n\n``` javascript\n    getHoliAndWeekendDay: function(){\n        //定义10天内所有的日期\n        let Days = [new Date(),\n                    new Date(new Date().getTime() + 1*24*60*60*1000),\n                    new Date(new Date().getTime() + 2*24*60*60*1000),\n                    new Date(new Date().getTime() + 3*24*60*60*1000),\n                    new Date(new Date().getTime() + 4*24*60*60*1000),\n                    new Date(new Date().getTime() + 5*24*60*60*1000),\n                    new Date(new Date().getTime() + 6*24*60*60*1000),\n                    new Date(new Date().getTime() + 7*24*60*60*1000),\n                    new Date(new Date().getTime() + 8*24*60*60*1000),\n                    new Date(new Date().getTime() + 9*24*60*60*1000)]\n\n        //定义周末日期数组\n        let WeekendDay = []\n\n        //判断日期是否为周末，是的话添加到周末日期数组\n        $.each(Days,function(index,item){\n            if(item.getDay()==0 || item.getDay()==6){\n                WeekendDay.push(item)\n            }\n        })\n\n        //将周末日期和假期日合并返回\n        return WeekendDay.concat(Holiday)\n    }\n\n```\n\n> 定义compareDates方法用于判断日期是否是同一天，只判断年月日是否相同\n``` javascript\n    compareDates: function(date, dates) {\n        for (let i = 0; i < dates.length; i++) {\n            if (dates[i].getDate() == date.getDate() &&\n                dates[i].getMonth() == date.getMonth() &&\n                dates[i].getYear() == date.getYear()) {\n                return true\n            }\n        }\n    }\n```\n\n> 获取三个工作日内的最大日期\n``` javascript\n    getMaxDate: function(){\n        //设置最大日期初始值(第3天)\n        let MaxDate = new Date(new Date().getTime() + 3*24*60*60*1000)\n\n        //三个工作日日期数组初始值(先假定未来三天内全是工作日)\n        let workDays = [new Date(new Date()),new Date(new Date().getTime() + 1*24*60*60*1000),new Date(new Date().getTime() + 2*24*60*60*1000)]\n\n        //获取假期日+周末日期\n        let holiDays = getHoliAndWeekendDay()\n        for(let i =0;i<workDays.length;i++){\n            //判断工作日是否为假期日或者双休日，是的话最大日期加一天\n            if(compareDates(workDays[i],holiDays)){\n                MaxDate = new Date(MaxDate.getTime() + 24*60*60*1000)\n            }\n            //循环判断最新的最大日期是否为假期日或者双休日，是的话最大日期再加一天，直到最大日期不是假期日和双休日则跳出循环\n            while(compareDates(MaxDate,holiDays)){\n                MaxDate = new Date(MaxDate.getTime() + 24*60*60*1000)\n            }\n        }\n        return MaxDate\n    }\n```\n\n> 初始化kendo-ui日期控件\n``` javascript\n    initKendoDateControl: function (target) {\n        target.kendoDatePicker({\n        format: \"dd MMM yyyy\",\n        parseFormats: [\"yyyy-MM-dd\"],\n        disableDates:function(date){        //配置禁止选择指定日期\n            let isHoliDay = false\n            let holiDays = getHoliAndWeekendDay()   //假期日+周末日期\n            if (date && compareDates(date,holiDays)){\n                isHoliDay = true\n            }\n            return isHoliDay\n        },\n        max:getMaxDate()        //定义最大可选日期，即第三个工作日为最大日期，第三个工作日后的所有日期不可宣不可见\n        })\n        .data('kendoDatePicker').enable(true)\n\n        // 失去焦点时判断日期合法性\n        target.on('blur', function () {\n            $(this).kendoDateCheck()\n        })\n    }\n```\n\n> 初始化日期输入框\n``` javascript\n    initKendoDateControl($(\"#date\"))\n\n    //将日期输入框设置成只可点选不可输入\n    $(\"#date\").data(\"kendoDatePicker\").element[0].disabled=true\n```\n",
    "clickCount": 99,
    "date": "2019-09-11T14:48:52.219Z"
  }
}