{
  "article": {
    "_id": "5d996d155e00d717bc269bcc",
    "title": "ES6常用知识点总结归纳",
    "type": "Javascript",
    "content_html": "<h2><a id=\"_0\"></a>一、新的声明方式</h2>\n<ol>\n<li>let：声明的变量只在代码块内有效</li>\n<li>const： 声明常量，声明时必须赋值且不可改变</li>\n</ol>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">  <span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-string\">'aaa'</span>;\n  <span class=\"hljs-keyword\">const</span> b = <span class=\"hljs-string\">'bbb'</span>;\n  <span class=\"hljs-built_in\">console</span>.log(a, b);\n</code></div></pre>\n<h2><a id=\"_10\"></a>二、变量的解构赋值</h2>\n<blockquote>\n<p>数组解构赋值</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">  <span class=\"hljs-keyword\">let</span> [aa, bb, cc] = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>];\n</code></div></pre>\n<blockquote>\n<p>对象解构赋值</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">  <span class=\"hljs-keyword\">let</span> { cnName, enName } = {\n    <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">'151521574'</span>,\n    <span class=\"hljs-attr\">cnName</span>: <span class=\"hljs-string\">'张生'</span>,\n    <span class=\"hljs-attr\">enName</span>: <span class=\"hljs-string\">'Ronnie'</span>\n  };\n  <span class=\"hljs-built_in\">console</span>.log(cnName, enName);  <span class=\"hljs-comment\">//'张生'，'Ronnie'</span>\n</code></div></pre>\n<h2><a id=\"rest_28\"></a>三、扩展运算符和rest运算符</h2>\n<blockquote>\n<p>对象扩展运算符</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">test01</span>(<span class=\"hljs-params\">...arg</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(arg[<span class=\"hljs-number\">0</span>]); <span class=\"hljs-comment\">//1</span>\n    <span class=\"hljs-built_in\">console</span>.log(arg[<span class=\"hljs-number\">1</span>]); <span class=\"hljs-comment\">//2</span>\n    <span class=\"hljs-built_in\">console</span>.log(arg[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-comment\">//3</span>\n    <span class=\"hljs-built_in\">console</span>.log(arg[<span class=\"hljs-number\">3</span>]); <span class=\"hljs-comment\">//undefined</span>\n  }\n  test01(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>);\n\n  <span class=\"hljs-keyword\">let</span> arr1 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n  <span class=\"hljs-keyword\">let</span> arr2 = [...arr1];\n  arr2.push(<span class=\"hljs-number\">4</span>); <span class=\"hljs-comment\">//此时不改变arr1</span>\n  <span class=\"hljs-built_in\">console</span>.log(arr1); <span class=\"hljs-comment\">//[1,2,3]</span>\n  <span class=\"hljs-built_in\">console</span>.log(arr2); <span class=\"hljs-comment\">//[1,2,3,4]</span>\n</code></div></pre>\n<blockquote>\n<p>rest运算符(表示剩余参数)</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">test02</span>(<span class=\"hljs-params\">first, ...arg</span>) </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> item <span class=\"hljs-keyword\">of</span> arg) {\n      <span class=\"hljs-built_in\">console</span>.log(item); <span class=\"hljs-comment\">//依次输出1,2，3,4,5,6</span>\n    }\n    <span class=\"hljs-built_in\">console</span>.log(first); <span class=\"hljs-comment\">//0</span>\n  }\n  test02(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>);\n</code></div></pre>\n<h2><a id=\"_57\"></a>四、字符串模版</h2>\n<blockquote>\n<p>字符串模版</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">  <span class=\"hljs-keyword\">let</span> name = <span class=\"hljs-string\">'Ronnie'</span>;\n  <span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-string\">`大家好，我是&lt;b&gt;<span class=\"hljs-subst\">${name}</span>&lt;/b&gt;&lt;br/&gt;很高兴认识大家`</span>;\n  <span class=\"hljs-built_in\">document</span>.write(str);\n</code></div></pre>\n<blockquote>\n<p>字符串查找</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">  <span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-string\">`大家好，我是&lt;b&gt;<span class=\"hljs-subst\">${name}</span>&lt;/b&gt;&lt;br/&gt;很高兴认识大家`</span>;\n  <span class=\"hljs-built_in\">console</span>.log(str.includes(<span class=\"hljs-string\">'不高兴'</span>)); <span class=\"hljs-comment\">//false</span>\n  <span class=\"hljs-built_in\">console</span>.log(str.startsWith(<span class=\"hljs-string\">'大家好'</span>)); <span class=\"hljs-comment\">//判断开头是否存在，true</span>\n  <span class=\"hljs-built_in\">console</span>.log(str.endsWith(<span class=\"hljs-string\">'大家'</span>)); <span class=\"hljs-comment\">//判断结尾是否存在，true</span>\n</code></div></pre>\n<h2><a id=\"_73\"></a>五、数字操作</h2>\n<blockquote>\n<p>二进制声明 Binary</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">  <span class=\"hljs-keyword\">let</span> binary = <span class=\"hljs-number\">0b010101</span>;\n  <span class=\"hljs-built_in\">console</span>.log(binary); <span class=\"hljs-comment\">//21</span>\n</code></div></pre>\n<blockquote>\n<p>八进制声明 Octal</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">  <span class=\"hljs-keyword\">let</span> octal = <span class=\"hljs-number\">0o666</span>;\n  <span class=\"hljs-built_in\">console</span>.log(octal); <span class=\"hljs-comment\">//438</span>\n</code></div></pre>\n<blockquote>\n<p>判断是否为数字</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">  <span class=\"hljs-built_in\">Number</span>.isFinite(<span class=\"hljs-number\">888</span>); <span class=\"hljs-comment\">//true</span>\n  <span class=\"hljs-built_in\">Number</span>.isFinite(<span class=\"hljs-string\">'888'</span>); <span class=\"hljs-comment\">//false，不会先将字符串尝试转换成数字再判断</span>\n  <span class=\"hljs-built_in\">Number</span>.isFinite(<span class=\"hljs-string\">'asd'</span>); <span class=\"hljs-comment\">//false</span>\n  <span class=\"hljs-built_in\">Number</span>.isFinite(<span class=\"hljs-literal\">undefined</span>); <span class=\"hljs-comment\">//false</span>\n  <span class=\"hljs-built_in\">Number</span>.isFinite(<span class=\"hljs-literal\">NaN</span>); <span class=\"hljs-comment\">//false</span>\n</code></div></pre>\n<blockquote>\n<p>判断是否是整数</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">  <span class=\"hljs-built_in\">Number</span>.isInteger(<span class=\"hljs-number\">1.1</span>); <span class=\"hljs-comment\">//false</span>\n  <span class=\"hljs-built_in\">Number</span>.isInteger(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//true</span>\n</code></div></pre>\n<blockquote>\n<p>最大和最小安全整数</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">  <span class=\"hljs-built_in\">Number</span>.MAX_SAFE_INTEGER;\n  <span class=\"hljs-built_in\">Number</span>.MIN_SAFE_INTEGER;\n</code></div></pre>\n<blockquote>\n<p>判断是否为安全整数</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">  <span class=\"hljs-built_in\">Number</span>.isSafeInteger(<span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">53</span>) - <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//true</span>\n  <span class=\"hljs-built_in\">Number</span>.isSafeInteger(<span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">53</span>) + <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//false</span>\n</code></div></pre>\n<h2><a id=\"_113\"></a>六、新增的数组知识</h2>\n<blockquote>\n<p>数组格式转换: Array.from、 Array.of</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">  <span class=\"hljs-keyword\">let</span> json = {\n    <span class=\"hljs-string\">'0'</span>: <span class=\"hljs-string\">'Ronnie'</span>,\n    <span class=\"hljs-string\">'1'</span>: <span class=\"hljs-string\">'Rose'</span>,\n    <span class=\"hljs-string\">'2'</span>: <span class=\"hljs-string\">'zhangsheng'</span>,\n    <span class=\"hljs-string\">'3'</span>: <span class=\"hljs-string\">'Json'</span>,\n    <span class=\"hljs-attr\">length</span>: <span class=\"hljs-number\">4</span>\n  };\n\n  <span class=\"hljs-keyword\">let</span> jsonArr = <span class=\"hljs-built_in\">Array</span>.from(json);\n  <span class=\"hljs-built_in\">console</span>.log(jsonArr); <span class=\"hljs-comment\">//['Ronnie','Rose','zhangsheng','Json']</span>\n\n  <span class=\"hljs-keyword\">let</span> strArr = <span class=\"hljs-built_in\">Array</span>.of(<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>);\n  <span class=\"hljs-built_in\">console</span>.log(strArr); <span class=\"hljs-comment\">//['a', 'b', 'c', 'd']</span>\n</code></div></pre>\n<blockquote>\n<p>find()方法:返回满足条件的第一个元素，三个参数</p>\n</blockquote>\n<ul>\n<li>value：当前查找的值</li>\n<li>index: 当前查找的值的索引</li>\n<li>strArr: 查找的原数组</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">  <span class=\"hljs-keyword\">let</span> findRst = strArr.find(<span class=\"hljs-function\">(<span class=\"hljs-params\">value, index, strArr</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> value === <span class=\"hljs-string\">'d'</span> || value === <span class=\"hljs-string\">'a'</span>;\n  });\n  <span class=\"hljs-built_in\">console</span>.log(findRst);  <span class=\"hljs-comment\">//a</span>\n</code></div></pre>\n<blockquote>\n<p>fill() 方法</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">  <span class=\"hljs-keyword\">let</span> fillArr = [<span class=\"hljs-string\">'Ronnie'</span>, <span class=\"hljs-string\">'Rose'</span>, <span class=\"hljs-string\">'Zhangsheng'</span>];\n  fillArr.fill(<span class=\"hljs-string\">'es6'</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">//将索引为[1,3),即索引为1和2的值替换为'es6'</span>\n  <span class=\"hljs-built_in\">console</span>.log(fillArr);<span class=\"hljs-comment\">//[\"Ronnie\", \"es6\", \"es6\"]</span>\n</code></div></pre>\n<blockquote>\n<p>for…of</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> item <span class=\"hljs-keyword\">of</span> fillArr) {\n    <span class=\"hljs-built_in\">console</span>.log(item);\n  }\n  <span class=\"hljs-comment\">//带索引的方式</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> [index, value] <span class=\"hljs-keyword\">of</span> fillArr.entries()) {\n    <span class=\"hljs-built_in\">console</span>.log(index + <span class=\"hljs-string\">':'</span> + value);\n  }\n</code></div></pre>\n<blockquote>\n<p>entries() 生成的是Iterator形式的数组,这种形式的好处就是可以让我们在需要时用next()手动跳转到下一个值</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">  <span class=\"hljs-keyword\">let</span> list = fillArr.entries();\n  <span class=\"hljs-built_in\">console</span>.log(list.next().value); <span class=\"hljs-comment\">//[0, \"Ronnie\"]</span>\n  <span class=\"hljs-built_in\">console</span>.log(list.next().value); <span class=\"hljs-comment\">//[1, \"es6\"]</span>\n  <span class=\"hljs-built_in\">console</span>.log(list.next().value); <span class=\"hljs-comment\">//[2, \"es6\"]</span>\n  <span class=\"hljs-built_in\">console</span>.log(list.next().value); <span class=\"hljs-comment\">//undefined</span>\n</code></div></pre>\n<blockquote>\n<p>some方法: 返回一个Boolean，判断是否有元素符合func条件</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">  <span class=\"hljs-keyword\">let</span> someArr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>];\n  someArr.some(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item &gt; <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//true</span>\n</code></div></pre>\n<blockquote>\n<p>every方法: 返回一个Boolean，判断每一个元素是否符合func条件</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">  <span class=\"hljs-keyword\">let</span> everyArr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>];\n  everyArr.every(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item &gt; <span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">//false</span>\n  everyArr.every(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item &gt;= <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//true</span>\n</code></div></pre>\n<blockquote>\n<p>filter方法: 返回一个符合func条件的元素数组,不改变原来数组</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">  <span class=\"hljs-keyword\">let</span> ages = [<span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">32</span>];\n  ages.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item &gt; <span class=\"hljs-number\">25</span>); <span class=\"hljs-comment\">//[28,32]</span>\n  <span class=\"hljs-built_in\">console</span>.log(ages); <span class=\"hljs-comment\">//[23, 28, 25, 32]</span>\n</code></div></pre>\n<blockquote>\n<p>map方法: 返回一个新的array，数组元素由每一次调用函数产生结果组成</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">  <span class=\"hljs-keyword\">let</span> mapArr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>];\n  mapArr.map(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item + <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//[2,3,4,5,6,7]</span>\n</code></div></pre>\n<blockquote>\n<p>in方法:用来判断对象或者数组中是否存在某个key或索引</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">  <span class=\"hljs-keyword\">let</span> inObj = {\n    <span class=\"hljs-attr\">cnName</span>: <span class=\"hljs-string\">'张生'</span>,\n    <span class=\"hljs-attr\">enName</span>: <span class=\"hljs-string\">'Ronnie'</span>\n  };\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'enName'</span> <span class=\"hljs-keyword\">in</span> inObj); <span class=\"hljs-comment\">//true</span>\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">4</span> <span class=\"hljs-keyword\">in</span> ages); <span class=\"hljs-comment\">//false</span>\n</code></div></pre>\n<h2><a id=\"ES6_203\"></a>七、ES6中的函数</h2>\n<blockquote>\n<p>函数解构json对象</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">  <span class=\"hljs-keyword\">let</span> jsonObj = {\n    <span class=\"hljs-attr\">cnName</span>: <span class=\"hljs-string\">'张生'</span>,\n    <span class=\"hljs-attr\">enName</span>: <span class=\"hljs-string\">'Rose'</span>\n  };\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fun</span>(<span class=\"hljs-params\">{ cnName, enName = <span class=\"hljs-string\">'Ronnie'</span> }</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(cnName, enName);\n  }\n  fun(jsonObj); <span class=\"hljs-comment\">//张生 Rose</span>\n</code></div></pre>\n<h2><a id=\"ES6_218\"></a>八、ES6中的对象</h2>\n<blockquote>\n<p>对象赋值：ES6允许把声明的变量直接赋值给对象</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">  <span class=\"hljs-keyword\">let</span> nameObj = { cnName, enName };\n  <span class=\"hljs-built_in\">console</span>.log(nameObj); <span class=\"hljs-comment\">//{cnName: \"张生\",enName: \"Ronnie\"}</span>\n\n  <span class=\"hljs-comment\">//对象Key值构建</span>\n  <span class=\"hljs-keyword\">let</span> key = <span class=\"hljs-string\">'skill'</span>;\n  <span class=\"hljs-keyword\">let</span> keyObj = {\n    [key]: <span class=\"hljs-string\">'web'</span>\n  };\n  <span class=\"hljs-built_in\">console</span>.log(keyObj);  <span class=\"hljs-comment\">//skill: \"web\"</span>\n</code></div></pre>\n<blockquote>\n<p>Object.is( ) 对象比较,===为同值相等，is()为严格相等</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">  <span class=\"hljs-built_in\">console</span>.log(+<span class=\"hljs-number\">0</span> === <span class=\"hljs-number\">-0</span>); <span class=\"hljs-comment\">//true</span>\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-literal\">NaN</span> === <span class=\"hljs-literal\">NaN</span>); <span class=\"hljs-comment\">//false</span>\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.is(+<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-0</span>)); <span class=\"hljs-comment\">//false</span>\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.is(<span class=\"hljs-literal\">NaN</span>, <span class=\"hljs-literal\">NaN</span>)); <span class=\"hljs-comment\">//true</span>\n</code></div></pre>\n<blockquote>\n<p>Object.assign()对象合并</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">  <span class=\"hljs-keyword\">let</span> obj1 = { <span class=\"hljs-attr\">cnName</span>: <span class=\"hljs-string\">'张生'</span> };\n  <span class=\"hljs-keyword\">let</span> obj2 = { <span class=\"hljs-attr\">enName</span>: <span class=\"hljs-string\">'Ronnie'</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">26</span> };\n  <span class=\"hljs-keyword\">let</span> obj3 = <span class=\"hljs-built_in\">Object</span>.assign(obj1, obj2);\n  <span class=\"hljs-built_in\">console</span>.log(obj3);<span class=\"hljs-comment\">//{cnName: \"张生\", enName: \"Ronnie\", age: 26}</span>\n</code></div></pre>\n<h2><a id=\"SetWeakSetmap_249\"></a>九、Set、WeakSet以及map数据结构</h2>\n<p>Set:Set和Array 的区别是Set不允许内部有重复的值，如果有只显示一个，相当于去重</p>\n<blockquote>\n<p>Set的声明</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">  <span class=\"hljs-keyword\">let</span> setArr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-string\">'ronnie'</span>, <span class=\"hljs-string\">'zhangsheng'</span>, <span class=\"hljs-string\">'web'</span>]);\n  <span class=\"hljs-built_in\">console</span>.log(setArr); <span class=\"hljs-comment\">//Set(3) {'ronnie', 'zhangsheng', 'web'}</span>\n</code></div></pre>\n<blockquote>\n<p>Set值的增删查</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">  setArr.add(<span class=\"hljs-string\">'前端'</span>); <span class=\"hljs-comment\">//增</span>\n  setArr.delete(<span class=\"hljs-string\">'web'</span>); <span class=\"hljs-comment\">//删</span>\n  setArr.has(<span class=\"hljs-string\">'前端'</span>); <span class=\"hljs-comment\">//查: true</span>\n  setArr.clear(); <span class=\"hljs-comment\">//清空</span>\n</code></div></pre>\n<blockquote>\n<p>Set的遍历</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> item <span class=\"hljs-keyword\">of</span> setArr) {\n    <span class=\"hljs-built_in\">console</span>.log(item);\n  }\n</code></div></pre>\n<blockquote>\n<p>size属性</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">  <span class=\"hljs-built_in\">console</span>.log(setArr.size); <span class=\"hljs-comment\">//3</span>\n</code></div></pre>\n<p>WeakSet：用于存储对象的set</p>\n<blockquote>\n<p>WeakSet声明，声明是不允许赋值，否则报错,同时WeakSet里边的值也是不允许重复的</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">  <span class=\"hljs-keyword\">let</span> weakObj = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">WeakSet</span>();\n  weakObj.add({ <span class=\"hljs-attr\">cnName</span>: <span class=\"hljs-string\">'张生'</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">26</span> });\n  <span class=\"hljs-built_in\">console</span>.log(weakObj);\n</code></div></pre>\n<p>map：map是一种灵活，简单的适合一对一查找的数据结构，它跟json对象很像，但反应速度更高，而且Map的灵活性要更好，你可以把它看成一种特殊的键值对，但key可以设置成数组，值也可以设置成字符串</p>\n<blockquote>\n<p>map的声明</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">  <span class=\"hljs-keyword\">let</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>();\n</code></div></pre>\n<blockquote>\n<p>map的增删查</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">  <span class=\"hljs-keyword\">let</span> obj4 = { <span class=\"hljs-attr\">cnName</span>: <span class=\"hljs-string\">'张生'</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">26</span> };\n  map.set(<span class=\"hljs-string\">'ronnie'</span>, obj4); <span class=\"hljs-comment\">//增</span>\n  map.set(<span class=\"hljs-string\">'ronnie'</span>, <span class=\"hljs-string\">'永远十八岁'</span>); <span class=\"hljs-comment\">//改：相同key则修改</span>\n  map.set(obj4, <span class=\"hljs-string\">'Ronnie'</span>); <span class=\"hljs-comment\">//增：key也可以为对象</span>\n  <span class=\"hljs-built_in\">console</span>.log(map);\n  <span class=\"hljs-built_in\">console</span>.log(map.get(obj4)); <span class=\"hljs-comment\">//取值： Ronnie</span>\n  map.delete(<span class=\"hljs-string\">'ronnie'</span>); <span class=\"hljs-comment\">//删除:根据key值删除</span>\n  <span class=\"hljs-built_in\">console</span>.log(map.size); <span class=\"hljs-comment\">//size属性</span>\n  <span class=\"hljs-built_in\">console</span>.log(map.has(obj4)); <span class=\"hljs-comment\">//has：查找是否存在</span>\n  map.clear(); <span class=\"hljs-comment\">//clear清除所有元素</span>\n  <span class=\"hljs-built_in\">console</span>.log(map);\n</code></div></pre>\n<h2><a id=\"Proxy_303\"></a>十、Proxy预处理</h2>\n<p>Proxy: 类似于钩子函数，当我们在操作一个对象或者方法时会有几种前置动作</p>\n<ul>\n<li>get属性：get属性是在你得到某对象属性值时预处理的方法，它接收三个参数\n<ol>\n<li>target：得到的目标值</li>\n<li>key：目标的key值，相当于对象的属性</li>\n<li>property：可选参数，这个不常用</li>\n</ol>\n</li>\n<li>set属性：set属性是指你要改变Proxy属性值时，进行的预先处理。它接收四个参数。\n<ol>\n<li>target:目标值</li>\n<li>key：目标的Key值</li>\n<li>value：要改变的值</li>\n<li>receiver：改变前的原始值</li>\n</ol>\n</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\"><span class=\"hljs-keyword\">let</span> pro = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Proxy</span>(\n  {\n    <span class=\"hljs-attr\">add</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">val</span>) </span>{\n      <span class=\"hljs-keyword\">return</span> val + <span class=\"hljs-number\">10</span>;\n    },\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'I am Ronnie'</span>\n  },\n  {\n    <span class=\"hljs-attr\">get</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">target, key</span>) </span>{\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'come in Get'</span>);\n      <span class=\"hljs-keyword\">return</span> target[key];\n    },\n    <span class=\"hljs-attr\">set</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">target, key, value, receiver</span>) </span>{\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`setting <span class=\"hljs-subst\">${key}</span> = <span class=\"hljs-subst\">${value}</span>`</span>);\n      <span class=\"hljs-keyword\">return</span> (target[key] = value);\n    }\n  }\n);\n<span class=\"hljs-built_in\">console</span>.log(pro.name); <span class=\"hljs-comment\">//先输出 come in Get  再输出 I am Ronnie</span>\npro.name = <span class=\"hljs-string\">'张生'</span>; <span class=\"hljs-comment\">//setting name = 张生</span>\n</code></div></pre>\n<h2><a id=\"promise_337\"></a>十一、promise对象的使用</h2>\n<p>promise的出现是为了解决回调地狱的问题</p>\n<blockquote>\n<p>promise的基本用法(举例说明)，比如把大象放入冰箱有三个步骤</p>\n</blockquote>\n<ol>\n<li>打开冰箱门</li>\n<li>把大象放进去</li>\n<li>关上冰箱门</li>\n</ol>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\"><span class=\"hljs-keyword\">let</span> isSuccess = <span class=\"hljs-literal\">true</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">step1</span>(<span class=\"hljs-params\">resolve, reject</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'First step'</span>);\n  <span class=\"hljs-keyword\">if</span> (isSuccess) {\n    resolve(<span class=\"hljs-string\">'成功打开冰箱门'</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    reject(<span class=\"hljs-string\">'打开冰箱门出错'</span>);\n  }\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">step2</span>(<span class=\"hljs-params\">resolve, reject</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Second step'</span>);\n  isSuccess = <span class=\"hljs-literal\">false</span>;\n  <span class=\"hljs-keyword\">if</span> (isSuccess) {\n    resolve(<span class=\"hljs-string\">'成功把大象放进去'</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    reject(<span class=\"hljs-string\">'把大象放进去出错'</span>);\n  }\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">step3</span>(<span class=\"hljs-params\">resolve, reject</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Third step'</span>);\n  <span class=\"hljs-keyword\">if</span> (isSuccess) {\n    resolve(<span class=\"hljs-string\">'成功关上冰箱门'</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    reject(<span class=\"hljs-string\">'关上冰箱门出错'</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(step1)\n  .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rst</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(rst);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(step2);\n  })\n  .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rst</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(rst);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(step3);\n  })\n  .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rst</span>) </span>{\n    <span class=\"hljs-comment\">// console.log(rst);</span>\n    <span class=\"hljs-keyword\">return</span> rst;\n  })\n  .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> {\n    <span class=\"hljs-built_in\">console</span>.log(e); <span class=\"hljs-comment\">//捕获Promise reject返回的错误信息</span>\n  });\n</code></div></pre>\n<h2><a id=\"class_391\"></a>十二、class类的使用</h2>\n<blockquote>\n<p>类的声明与使用</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Coder</span> </span>{\n  name(val) {\n    <span class=\"hljs-built_in\">console</span>.log(val);\n    <span class=\"hljs-keyword\">return</span> val;\n  }\n  skill(val) {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.name(<span class=\"hljs-string\">'Ronnie'</span>) + <span class=\"hljs-string\">':'</span> + <span class=\"hljs-string\">'Skill-'</span> + val);\n  }\n  <span class=\"hljs-keyword\">constructor</span>(cnName, age) {\n    <span class=\"hljs-keyword\">this</span>.cnName = cnName;\n    <span class=\"hljs-keyword\">this</span>.age = age;\n  }\n  introduce() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.cnName + <span class=\"hljs-string\">':'</span> + <span class=\"hljs-keyword\">this</span>.age;\n  }\n}\n\n<span class=\"hljs-keyword\">let</span> Ronnie = <span class=\"hljs-keyword\">new</span> Coder(<span class=\"hljs-string\">'张生'</span>, <span class=\"hljs-number\">26</span>);\nRonnie.name(<span class=\"hljs-string\">'Ronnie'</span>);  <span class=\"hljs-comment\">//Ronnie</span>\nRonnie.skill(<span class=\"hljs-string\">'web'</span>);\t<span class=\"hljs-comment\">//Ronnie: Skill-web</span>\n<span class=\"hljs-built_in\">console</span>.log(Ronnie.introduce());  <span class=\"hljs-comment\">//Ronnie:26</span>\n</code></div></pre>\n<blockquote>\n<p>class的继承</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">htmler</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Coder</span> </span>{}\n\n<span class=\"hljs-keyword\">let</span> zhangsheng = <span class=\"hljs-keyword\">new</span> htmler();\nzhangsheng.name(<span class=\"hljs-string\">'zhangsheng'</span>); <span class=\"hljs-comment\">//zhangsheng</span>\n</code></div></pre>\n<h2><a id=\"_425\"></a>十三、模块化操作</h2>\n<blockquote>\n<p>模块化操作主要包括两个方面</p>\n</blockquote>\n<ol>\n<li>export :负责进行模块化，也是模块的输出</li>\n<li>import : 负责把模块引，也是模块的引入操作</li>\n</ol>\n<blockquote>\n<p>export的用法:export可以让我们把变量，函数，对象进行模块化，提供外部调用接口，让外部进行引用</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> name = <span class=\"hljs-string\">'Ronnie'</span>; <span class=\"hljs-comment\">//export   temp.js</span>\n\n<span class=\"hljs-keyword\">import</span> { a } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./temp.js'</span>; <span class=\"hljs-comment\">//在index.js中以import的形式引入  此时的a对应的是temp.js中输出的name</span>\n</code></div></pre>\n<blockquote>\n<p>多变量的输出以及函数的输出</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\"><span class=\"hljs-keyword\">let</span> var1 = <span class=\"hljs-string\">'Ronnie'</span>;\n<span class=\"hljs-keyword\">var</span> var2 = <span class=\"hljs-string\">'张生'</span>;\n<span class=\"hljs-keyword\">var</span> var3 = <span class=\"hljs-string\">'zhangsheng'</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">a, b</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> a + b;\n}\n<span class=\"hljs-keyword\">export</span> { var1, var2, var3, add };\n<span class=\"hljs-keyword\">import</span> { var1, add } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./temp'</span>; <span class=\"hljs-comment\">//对应的引入方式</span>\n</code></div></pre>\n<blockquote>\n<p>export defalut: 只能输出一个</p>\n</blockquote>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\"><span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-string\">'ronnie is so handsome'</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> str;\n<span class=\"hljs-keyword\">import</span> aaa <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./temp.js'</span>; <span class=\"hljs-comment\">//对应的引入方式，引入的名称可以任意</span>\n</code></div></pre>\n<p>常用ES6知识点就这么多</p>\n",
    "content_md": "## 一、新的声明方式\n1. let：声明的变量只在代码块内有效\n2. const： 声明常量，声明时必须赋值且不可改变\n\n```javascript\n  let a = 'aaa';\n  const b = 'bbb';\n  console.log(a, b);\n```\n\n## 二、变量的解构赋值\n\n> 数组解构赋值\n\n```javascript\n  let [aa, bb, cc] = [0, 1, 2];\n```\n\n> 对象解构赋值\n```javascript\n  let { cnName, enName } = {\n    id: '151521574',\n    cnName: '张生',\n    enName: 'Ronnie'\n  };\n  console.log(cnName, enName);  //'张生'，'Ronnie'\n```\n\n## 三、扩展运算符和rest运算符\n> 对象扩展运算符\n```javascript\n  function test01(...arg) {\n    console.log(arg[0]); //1\n    console.log(arg[1]); //2\n    console.log(arg[2]); //3\n    console.log(arg[3]); //undefined\n  }\n  test01(1, 2, 3);\n\n  let arr1 = [1, 2, 3];\n  let arr2 = [...arr1];\n  arr2.push(4); //此时不改变arr1\n  console.log(arr1); //[1,2,3]\n  console.log(arr2); //[1,2,3,4]\n```\n\n> rest运算符(表示剩余参数)\n```javascript\n  function test02(first, ...arg) {\n    for (let item of arg) {\n      console.log(item); //依次输出1,2，3,4,5,6\n    }\n    console.log(first); //0\n  }\n  test02(0, 1, 2, 3, 4, 5, 6);\n```\n\n## 四、字符串模版\n\n> 字符串模版\n```javascript\n  let name = 'Ronnie';\n  let str = `大家好，我是<b>${name}</b><br/>很高兴认识大家`;\n  document.write(str);\n```\n> 字符串查找\n```javascript\n  let str = `大家好，我是<b>${name}</b><br/>很高兴认识大家`;\n  console.log(str.includes('不高兴')); //false\n  console.log(str.startsWith('大家好')); //判断开头是否存在，true\n  console.log(str.endsWith('大家')); //判断结尾是否存在，true\n```\n\n## 五、数字操作\n\n> 二进制声明 Binary\n```javascript\n  let binary = 0b010101;\n  console.log(binary); //21\n```\n> 八进制声明 Octal\n```javascript\n  let octal = 0o666;\n  console.log(octal); //438\n```\n\n> 判断是否为数字\n```javascript\n  Number.isFinite(888); //true\n  Number.isFinite('888'); //false，不会先将字符串尝试转换成数字再判断\n  Number.isFinite('asd'); //false\n  Number.isFinite(undefined); //false\n  Number.isFinite(NaN); //false\n```\n\n> 判断是否是整数\n```javascript\n  Number.isInteger(1.1); //false\n  Number.isInteger(1); //true\n```\n\n> 最大和最小安全整数\n```javascript\n  Number.MAX_SAFE_INTEGER;\n  Number.MIN_SAFE_INTEGER;\n```\n\n> 判断是否为安全整数\n```javascript\n  Number.isSafeInteger(Math.pow(2, 53) - 1); //true\n  Number.isSafeInteger(Math.pow(2, 53) + 1); //false\n```\n\n## 六、新增的数组知识\n> 数组格式转换: Array.from、 Array.of\n```javascript\n  let json = {\n    '0': 'Ronnie',\n    '1': 'Rose',\n    '2': 'zhangsheng',\n    '3': 'Json',\n    length: 4\n  };\n\n  let jsonArr = Array.from(json);\n  console.log(jsonArr); //['Ronnie','Rose','zhangsheng','Json']\n\n  let strArr = Array.of('a', 'b', 'c', 'd');\n  console.log(strArr); //['a', 'b', 'c', 'd']\n```\n> find()方法:返回满足条件的第一个元素，三个参数\n- value：当前查找的值\n- index: 当前查找的值的索引\n- strArr: 查找的原数组\n\n```javascript\n  let findRst = strArr.find((value, index, strArr) => {\n    return value === 'd' || value === 'a';\n  });\n  console.log(findRst);  //a\n```\n> fill() 方法\n```javascript\n  let fillArr = ['Ronnie', 'Rose', 'Zhangsheng'];\n  fillArr.fill('es6', 1, 3); //将索引为[1,3),即索引为1和2的值替换为'es6'\n  console.log(fillArr);//[\"Ronnie\", \"es6\", \"es6\"]\n```\n\n> for...of\n```javascript\n  for (let item of fillArr) {\n    console.log(item);\n  }\n  //带索引的方式\n  for (let [index, value] of fillArr.entries()) {\n    console.log(index + ':' + value);\n  }\n```\n\n> entries() 生成的是Iterator形式的数组,这种形式的好处就是可以让我们在需要时用next()手动跳转到下一个值\n```javascript\n  let list = fillArr.entries();\n  console.log(list.next().value); //[0, \"Ronnie\"]\n  console.log(list.next().value); //[1, \"es6\"]\n  console.log(list.next().value); //[2, \"es6\"]\n  console.log(list.next().value); //undefined\n```\n\n> some方法: 返回一个Boolean，判断是否有元素符合func条件\n```javascript\n  let someArr = [1, 2, 3, 4];\n  someArr.some(item => item > 1); //true\n```\n\n> every方法: 返回一个Boolean，判断每一个元素是否符合func条件\n```javascript\n  let everyArr = [1, 2, 3, 4];\n  everyArr.every(item => item > 3); //false\n  everyArr.every(item => item >= 1); //true\n```\n\n> filter方法: 返回一个符合func条件的元素数组,不改变原来数组\n```javascript\n  let ages = [23, 28, 25, 32];\n  ages.filter(item => item > 25); //[28,32]\n  console.log(ages); //[23, 28, 25, 32]\n```\n\n> map方法: 返回一个新的array，数组元素由每一次调用函数产生结果组成\n```javascript\n  let mapArr = [1, 2, 3, 4, 5, 6];\n  mapArr.map(item => item + 1); //[2,3,4,5,6,7]\n```\n> in方法:用来判断对象或者数组中是否存在某个key或索引\n```javascript\n  let inObj = {\n    cnName: '张生',\n    enName: 'Ronnie'\n  };\n  console.log('enName' in inObj); //true\n  console.log(4 in ages); //false\n```\n\n## 七、ES6中的函数\n\n> 函数解构json对象\n```javascript\n  let jsonObj = {\n    cnName: '张生',\n    enName: 'Rose'\n  };\n\n  function fun({ cnName, enName = 'Ronnie' }) {\n    console.log(cnName, enName);\n  }\n  fun(jsonObj); //张生 Rose\n```\n\n## 八、ES6中的对象\n\n> 对象赋值：ES6允许把声明的变量直接赋值给对象\n```javascript\n  let nameObj = { cnName, enName };\n  console.log(nameObj); //{cnName: \"张生\",enName: \"Ronnie\"}\n\n  //对象Key值构建\n  let key = 'skill';\n  let keyObj = {\n    [key]: 'web'\n  };\n  console.log(keyObj);  //skill: \"web\"\n```\n\n> Object.is( ) 对象比较,===为同值相等，is()为严格相等\n```javascript\n  console.log(+0 === -0); //true\n  console.log(NaN === NaN); //false\n  console.log(Object.is(+0, -0)); //false\n  console.log(Object.is(NaN, NaN)); //true\n```\n\n> Object.assign()对象合并\n```javascript\n  let obj1 = { cnName: '张生' };\n  let obj2 = { enName: 'Ronnie', age: 26 };\n  let obj3 = Object.assign(obj1, obj2);\n  console.log(obj3);//{cnName: \"张生\", enName: \"Ronnie\", age: 26}\n```\n\n## 九、Set、WeakSet以及map数据结构\n\nSet:Set和Array 的区别是Set不允许内部有重复的值，如果有只显示一个，相当于去重\n> Set的声明\n```javascript\n  let setArr = new Set(['ronnie', 'zhangsheng', 'web']);\n  console.log(setArr); //Set(3) {'ronnie', 'zhangsheng', 'web'}\n```\n> Set值的增删查\n```javascript\n  setArr.add('前端'); //增\n  setArr.delete('web'); //删\n  setArr.has('前端'); //查: true\n  setArr.clear(); //清空\n```\n\n> Set的遍历\n```javascript\n  for (let item of setArr) {\n    console.log(item);\n  }\n```\n> size属性\n```javascript\n  console.log(setArr.size); //3\n```\n\nWeakSet：用于存储对象的set\n> WeakSet声明，声明是不允许赋值，否则报错,同时WeakSet里边的值也是不允许重复的\n```javascript\n  let weakObj = new WeakSet();\n  weakObj.add({ cnName: '张生', age: 26 });\n  console.log(weakObj);\n```\nmap：map是一种灵活，简单的适合一对一查找的数据结构，它跟json对象很像，但反应速度更高，而且Map的灵活性要更好，你可以把它看成一种特殊的键值对，但key可以设置成数组，值也可以设置成字符串\n> map的声明\n```javascript\n  let map = new Map();\n```\n> map的增删查\n```javascript\n  let obj4 = { cnName: '张生', age: 26 };\n  map.set('ronnie', obj4); //增\n  map.set('ronnie', '永远十八岁'); //改：相同key则修改\n  map.set(obj4, 'Ronnie'); //增：key也可以为对象\n  console.log(map);\n  console.log(map.get(obj4)); //取值： Ronnie\n  map.delete('ronnie'); //删除:根据key值删除\n  console.log(map.size); //size属性\n  console.log(map.has(obj4)); //has：查找是否存在\n  map.clear(); //clear清除所有元素\n  console.log(map);\n```\n\n## 十、Proxy预处理\nProxy: 类似于钩子函数，当我们在操作一个对象或者方法时会有几种前置动作\n- get属性：get属性是在你得到某对象属性值时预处理的方法，它接收三个参数\n  1. target：得到的目标值\n  2. key：目标的key值，相当于对象的属性\n  3. property：可选参数，这个不常用\n- set属性：set属性是指你要改变Proxy属性值时，进行的预先处理。它接收四个参数。\n  1. target:目标值\n  2. key：目标的Key值\n  3. value：要改变的值\n  4. receiver：改变前的原始值\n```javascript\nlet pro = new Proxy(\n  {\n    add: function(val) {\n      return val + 10;\n    },\n    name: 'I am Ronnie'\n  },\n  {\n    get: function(target, key) {\n      console.log('come in Get');\n      return target[key];\n    },\n    set: function(target, key, value, receiver) {\n      console.log(`setting ${key} = ${value}`);\n      return (target[key] = value);\n    }\n  }\n);\nconsole.log(pro.name); //先输出 come in Get  再输出 I am Ronnie\npro.name = '张生'; //setting name = 张生\n```\n\n## 十一、promise对象的使用\n\npromise的出现是为了解决回调地狱的问题\n> promise的基本用法(举例说明)，比如把大象放入冰箱有三个步骤\n1. 打开冰箱门\n2. 把大象放进去\n3. 关上冰箱门\n\n```javascript\nlet isSuccess = true;\nfunction step1(resolve, reject) {\n  console.log('First step');\n  if (isSuccess) {\n    resolve('成功打开冰箱门');\n  } else {\n    reject('打开冰箱门出错');\n  }\n}\nfunction step2(resolve, reject) {\n  console.log('Second step');\n  isSuccess = false;\n  if (isSuccess) {\n    resolve('成功把大象放进去');\n  } else {\n    reject('把大象放进去出错');\n  }\n}\nfunction step3(resolve, reject) {\n  console.log('Third step');\n  if (isSuccess) {\n    resolve('成功关上冰箱门');\n  } else {\n    reject('关上冰箱门出错');\n  }\n}\n\nnew Promise(step1)\n  .then(function(rst) {\n    console.log(rst);\n    return new Promise(step2);\n  })\n  .then(function(rst) {\n    console.log(rst);\n    return new Promise(step3);\n  })\n  .then(function(rst) {\n    // console.log(rst);\n    return rst;\n  })\n  .catch(e => {\n    console.log(e); //捕获Promise reject返回的错误信息\n  });\n```\n\n## 十二、class类的使用\n\n> 类的声明与使用\n```javascript\nclass Coder {\n  name(val) {\n    console.log(val);\n    return val;\n  }\n  skill(val) {\n    console.log(this.name('Ronnie') + ':' + 'Skill-' + val);\n  }\n  constructor(cnName, age) {\n    this.cnName = cnName;\n    this.age = age;\n  }\n  introduce() {\n    return this.cnName + ':' + this.age;\n  }\n}\n\nlet Ronnie = new Coder('张生', 26);\nRonnie.name('Ronnie');  //Ronnie\nRonnie.skill('web');\t//Ronnie: Skill-web\nconsole.log(Ronnie.introduce());  //Ronnie:26\n```\n> class的继承\n```javascript\nclass htmler extends Coder {}\n\nlet zhangsheng = new htmler();\nzhangsheng.name('zhangsheng'); //zhangsheng\n```\n\n## 十三、模块化操作\n\n> 模块化操作主要包括两个方面\n1. export :负责进行模块化，也是模块的输出\n2. import : 负责把模块引，也是模块的引入操作\n\n> export的用法:export可以让我们把变量，函数，对象进行模块化，提供外部调用接口，让外部进行引用\n```javascript\nexport let name = 'Ronnie'; //export   temp.js\n\nimport { a } from './temp.js'; //在index.js中以import的形式引入  此时的a对应的是temp.js中输出的name\n```\n\n> 多变量的输出以及函数的输出\n```javascript\nlet var1 = 'Ronnie';\nvar var2 = '张生';\nvar var3 = 'zhangsheng';\nfunction add(a, b) {\n  return a + b;\n}\nexport { var1, var2, var3, add };\nimport { var1, add } from './temp'; //对应的引入方式\n```\n\n> export defalut: 只能输出一个\n```javascript\nlet str = 'ronnie is so handsome';\nexport default str;\nimport aaa from './temp.js'; //对应的引入方式，引入的名称可以任意\n```\n\n常用ES6知识点就这么多",
    "clickCount": 99,
    "date": "2019-10-06T04:33:10.375Z"
  }
}